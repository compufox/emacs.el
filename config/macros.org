#+PROPERTY: header-args:emacs-lisp :tangle ./macros.el

#+begin_src emacs-lisp
  (defmacro focks/os-p (os &rest os-name)
  "a macro to define a predicate that checks the current system's OS"
  `(defun ,(intern (mapconcat (lambda (x) (format "%s" x))
                              (list os "-p"))) ()
     (or ,@(mapcar (lambda (name) `(eq system-type ',name))
                   os-name))))

(defmacro focks/when-on (os &rest type-names)
  "define a macro (named when-on-OS) to run code when SYSTEM-TYPE matches any symbol in TYPE-NAMES

OS is a symbol (or string) to be placed in the macro name
TYPE-NAMES is a list of symbols that correspond to values returned by system-type"
  `(defmacro ,(intern (mapconcat (lambda (x) (format "%s" x)) (list "focks/when-on-" os) "")) (&rest body)
     `(when (or ,@(mapcar (lambda (name) `(eq system-type ',name))
			  ',type-names))
	,@body)))

(defmacro focks/unless-on (os &rest type-names)
  "define a macro (named unless-on-OS) to run code when SYSTEM-TYPE matches any symbol in TYPE-NAMES

OS is a symbol (or string) to be placed in the macro name
TYPE-NAMES is a list of symbols that correspond to values returned by system-type"
  `(defmacro ,(intern (mapconcat (lambda (x) (format "%s" x)) (list "focks/unless-on-" os) "")) (&rest body)
     `(unless (or ,@(mapcar (lambda (name) `(eq system-type ',name))
                            ',type-names))
	,@body)))

(defmacro focks/os-cond (&rest forms)
  `(cond
    ,@(cl-loop for f in forms
               if (eq (car f) t)
                 collect `(t ,@(cdr f))
               else
                 collect `((eq system-type ',(car f))
                           ,@(cdr f)))))

(defmacro focks/when-machine (hostname &rest body)
  "a macro to only execute BODY when HOSTNAME matches the value returned by SYSTEM-NAME

applies UPCASE to HOSTNAME parameter, and to the value returned by SYSTEM-NAME
if using a system that returns SYSTEM-NAME as System.local, we drop the .local"
  `(when (string-equal (upcase ,hostname)
                       (upcase (car (split-string (system-name) "\\."))))
     ,@body))

(defmacro focks/create-standard-os-macros ()
  "runs prior OS detection macros for standard values of SYSTEM-TYPE"
  `(progn
     ,@(cl-loop for os in '((gnu . hurd) (gnu/linux . linux)
                            (darwin . macos) (ms-dos . dos)
                            (windows-nt . windows) (gnu/kfreebsd . bsd)
                            haiku cygwin)
                for os-name = (if (listp os) (cdr os) os)
                for os-type = (if (listp os) (car os) os)

                collect
                `(progn
                   (focks/os-p ,os-name ,os-type)
                   (focks/when-on ,os-name ,os-type)
                   (focks/unless-on ,os-name ,os-type)))))


;; runs os-p/when-on/unless-on for all system-types
(focks/create-standard-os-macros)

;; create specialized when/unless-on macros
(focks/when-on unix gnu/linux aix berkeley-unix hpux usg-unix-v)
(focks/unless-on bsdish darwin berkeley-unix) ;; you know, bsd enough to count lmao
#+end_src
